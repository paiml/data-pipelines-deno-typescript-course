{
  "tasks": {
    "init": "deno run --allow-write --allow-read scripts/init.ts",
    "dev": "deno run --watch --allow-all src/main.ts",
    "test": "deno test --allow-all",
    "test:watch": "deno test --allow-all --watch",
    "test:coverage": "deno test --allow-all --coverage=coverage",
    "test:performance": "deno run --allow-all scripts/run-performance-tests.ts",
    "test:performance:staging": "deno run --allow-all scripts/run-performance-tests.ts --url https://data-pipelines-staging.deno.dev",
    "test:performance:production": "deno run --allow-all scripts/run-performance-tests.ts --url https://data-pipelines-prod.deno.dev",
    "test:memory": "deno run --allow-all --v8-flags=--expose-gc tests/performance/simple-memory-test.ts",
    "coverage": "deno coverage coverage",
    "coverage:lcov": "deno coverage coverage --lcov > coverage.lcov",
    "lint": "deno lint",
    "fmt": "deno fmt",
    "fmt:check": "deno fmt --check",
    "check": "deno check **/*.ts",
    "bench": "deno bench --allow-all",
    "bench:performance": "deno bench tests/performance/basic-benchmark.ts",
    "bench:json": "deno bench --json tests/performance/basic-benchmark.ts",
    "quality": "deno fmt --check && deno lint && deno test --allow-all --coverage=coverage",
    "satd:check": "! grep -r 'TODO\\|FIXME\\|HACK\\|XXX' --include='*.ts' --include='*.tsx' . || (echo '❌ SATD comments found!' && exit 1)",
    "build": "deno compile --allow-all --output=dist/pipeline src/main.ts",
    "deploy": "deployctl deploy --project=eu-usa-pipeline src/main.ts",
    "cli": "deno run --allow-all src/cli/pipeline-cli.ts",
    "pipeline:server": "deno run --allow-all src/cli/pipeline-cli.ts --server",
    "pipeline:convert": "deno run --allow-all src/cli/pipeline-cli.ts",
    
    "demo:basic": "deno run demo.ts",
    "demo:test": "deno test demo.test.ts", 
    "demo:bench": "deno bench demo.bench.ts",
    "demo:all": "deno task demo:basic && deno task demo:test && deno task demo:bench",
    
    "dev:watch": "deno run --watch --allow-all src/main.ts",
    "dev:debug": "deno run --inspect --allow-all src/main.ts",
    "serve": "deno run --allow-net --allow-read src/main.ts",
    "serve:8080": "PORT=8080 deno run --allow-net --allow-read src/main.ts",
    
    "test:unit": "deno test --allow-all src/**/*.test.ts",
    "test:integration": "deno test --allow-all tests/integration/",
    "test:e2e": "deno test --allow-all tests/e2e/",
    "test:perf": "deno task bench && deno task test:performance",
    "coverage:html": "deno coverage coverage --html",
    
    "build:prod": "deno compile --allow-all --no-check --output=dist/pipeline-prod src/main.ts",
    "build:debug": "deno compile --allow-all --output=dist/pipeline-debug src/main.ts",
    "build:docker": "docker build -t eu-usa-pipeline .",
    "build:all": "deno task build && deno task build:prod",
    
    "deploy:dev": "deployctl deploy --project=eu-usa-pipeline-dev src/main.ts",
    "deploy:staging": "deployctl deploy --project=eu-usa-pipeline-staging src/main.ts", 
    "deploy:prod": "deployctl deploy --project=eu-usa-pipeline-prod src/main.ts",
    
    "clean": "deno run --allow-read --allow-write scripts/clean.ts",
    "clean:coverage": "rm -rf coverage",
    "clean:dist": "rm -rf dist",
    "clean:all": "deno task clean:coverage && deno task clean:dist",
    
    "docs": "deno doc --html --name=\"EU-USA Pipeline\" src/",
    "docs:json": "deno doc --json src/ > docs.json",
    
    "health": "deno run --allow-net scripts/health-check.ts",
    "info": "deno info src/main.ts",
    "deps": "deno info --json src/main.ts | jq '.modules | length'",
    
    "fix": "deno fmt && deno lint --fix",
    "validate": "deno task check && deno task lint && deno task fmt:check",
    
    "pipeline:quality": "deno task fmt:check && deno task lint && deno task check && deno task test",
    "pipeline:build": "deno task pipeline:quality && deno task build",
    "pipeline:deploy": "deno task pipeline:build && deno task deploy:staging",
    
    "ruchy:demo": "deno run --allow-all ruchy-demo.ts",
    "ruchy:demo:shell": "deno run --allow-all ruchy-demo.ts --shell",
    "ruchy:check": "ruchy --version",
    "ruchy:eval": "ruchy -e",
    "ruchy:repl": "ruchy repl",
    "ruchy:run": "ruchy run",
    "ruchy:fmt": "ruchy fmt",
    "ruchy:test": "ruchy test",
    "ruchy:ast": "ruchy ast --json"
  },
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "skipLibCheck": false
  },
  "exclude": [
    "coverage/",
    "dist/",
    "tests/performance/k6-*.js",
    "**/*.js"
  ],
  "lint": {
    "rules": {
      "tags": ["recommended"],
      "exclude": ["no-explicit-any", "require-await"]
    },
    "include": ["src/", "tests/"],
    "exclude": ["coverage/", "dist/"]
  },
  "fmt": {
    "lineWidth": 100,
    "indentWidth": 2,
    "semiColons": true,
    "singleQuote": false,
    "proseWrap": "preserve",
    "include": ["src/", "tests/", "*.ts", "*.md"],
    "exclude": ["coverage/", "dist/"]
  },
  "test": {
    "include": ["src/**/*.test.ts", "tests/**/*.test.ts"],
    "exclude": ["coverage/", "dist/"]
  },
  "bench": {
    "include": ["src/**/*.bench.ts", "tests/**/*.bench.ts"],
    "exclude": ["coverage/", "dist/"]
  },
  "imports": {
    "@std/testing": "jsr:@std/assert@^1.0.0",
    "@std/assert": "jsr:@std/assert@^1.0.0",
    "@std/streams": "jsr:@std/streams@^1.0.0",
    "@std/async": "jsr:@std/async@^1.0.0",
    "@std/fmt": "jsr:@std/fmt@^1.0.0",
    "@std/path": "jsr:@std/path@^1.0.0",
    "@std/fs": "jsr:@std/fs@^1.0.0",
    "zod": "npm:zod@^3.23.0",
    "decimal.js": "npm:decimal.js@^10.4.3",
    "temporal-polyfill": "npm:temporal-polyfill@^0.2.5"
  }
}
