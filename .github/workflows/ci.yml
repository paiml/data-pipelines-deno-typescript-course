name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DENO_VERSION: "2.0.x"

jobs:
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
      
      - name: Format Check
        run: deno fmt --check
      
      - name: Lint
        run: deno lint
      
      - name: Type Check
        run: deno check **/*.ts
      
      - name: SATD Check
        run: |
          if grep -r "TODO\|FIXME\|HACK\|XXX" --include="*.ts" --include="*.tsx" .; then
            echo "‚ùå SATD comments found! Build failed."
            exit 1
          else
            echo "‚úÖ No SATD comments found"
          fi

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
      
      - name: Run Tests with Coverage
        run: deno test --allow-all --coverage=coverage
      
      - name: Generate Coverage Report
        run: |
          deno coverage coverage --lcov > coverage.lcov
          deno coverage coverage
      
      - name: Check Coverage Threshold
        run: |
          COVERAGE=$(deno coverage coverage | grep "All files" | awk '{print $3}' | sed 's/%//' || echo "0")
          echo "Current coverage: ${COVERAGE}%"
          
          # Week 1 threshold: 70%
          THRESHOLD=70
          
          if [ -z "$COVERAGE" ]; then
            echo "‚ö†Ô∏è Could not determine coverage, continuing..."
          elif (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "‚ùå Coverage ${COVERAGE}% is below ${THRESHOLD}%"
            exit 1
          else
            echo "‚úÖ Coverage ${COVERAGE}% meets threshold of ${THRESHOLD}%"
          fi
      
      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.lcov

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
      
      - name: Run Benchmarks
        run: deno bench --allow-all
      
      - name: Save Benchmark Results
        run: |
          deno bench --allow-all --json > benchmark-results.json || true
      
      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v4
        with:
          name: benchmarks
          path: benchmark-results.json
        if: always()

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
      
      - name: Check for Secrets
        run: |
          # Check for potential secrets or API keys
          if grep -r "api[_-]key\|secret\|password\|token" --include="*.ts" --include="*.tsx" . | grep -v "// \|/\*\|\* "; then
            echo "‚ö†Ô∏è Potential secrets found in code"
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, benchmark, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
      
      - name: Compile Application
        run: |
          deno compile --allow-all --output=dist/pipeline src/main.ts
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [quality, test, benchmark, security, build]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "## üìä CI Pipeline Summary"
          echo ""
          echo "### Quality Checks"
          echo "- Format: ${{ needs.quality.result == 'success' && '‚úÖ' || '‚ùå' }}"
          echo "- Lint: ${{ needs.quality.result == 'success' && '‚úÖ' || '‚ùå' }}"
          echo "- Type Check: ${{ needs.quality.result == 'success' && '‚úÖ' || '‚ùå' }}"
          echo "- SATD: ${{ needs.quality.result == 'success' && '‚úÖ Zero' || '‚ùå Found' }}"
          echo ""
          echo "### Tests"
          echo "- Unit Tests: ${{ needs.test.result == 'success' && '‚úÖ' || '‚ùå' }}"
          echo "- Coverage: ${{ needs.test.result == 'success' && '‚úÖ >70%' || '‚ùå' }}"
          echo ""
          echo "### Performance"
          echo "- Benchmarks: ${{ needs.benchmark.result == 'success' && '‚úÖ' || '‚ùå' }}"
          echo ""
          echo "### Security"
          echo "- Secrets Check: ${{ needs.security.result == 'success' && '‚úÖ' || '‚ö†Ô∏è' }}"
          echo ""
          echo "### Build"
          echo "- Compilation: ${{ needs.build.result == 'success' && '‚úÖ' || '‚ùå' }}"
          echo ""
          echo "---"
          echo "Overall: ${{ needs.build.result == 'success' && '‚úÖ All checks passed!' || '‚ùå Some checks failed' }}"